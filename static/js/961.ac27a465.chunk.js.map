{"version":3,"file":"static/js/961.ac27a465.chunk.js","mappings":"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","sources":["components/ApiFetch/ApiFetch.js","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["// key: bb3421bd0819dc82dbf8039d45c8f34c\n\nimport toast from 'react-hot-toast';\n\nconst API_KEY = 'bb3421bd0819dc82dbf8039d45c8f34c';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\n// метод получения массива популярных фильмов. Total_pages = 1000 по дефолту.\nexport const fetchPopular = async () => {\n  try {\n    const url = `${BASE_URL}trending/movie/day?api_key=${API_KEY}`;\n    const response = await fetch(url);\n    const data = await response.json();\n    return data.results;\n  } catch (error) {\n    console.log(error, 'fetchPopular');\n  }\n};\n\n// метод получения массива фильмов по запросу.\nexport const fetchByQuery = async searchQuery => {\n  try {\n    const url = `${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&include_adult=false`;\n    const response = await fetch(url);\n    const data = await response.json();\n    return data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// метод получения инфо о фильме по айдишке\nexport const fetchById = async movieId => {\n  try {\n    const url = `${BASE_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`;\n    const response = await fetch(url);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    toast.error('Something vent wrong:(');\n    console.log(error);\n  }\n};\n\n// актеры\nexport const fetchCredits = async movieId => {\n  try {\n    const url = `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`;\n    const response = await fetch(url);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    toast.error('Something vent wrong:(');\n    console.log(error);\n  }\n};\n\n//отзывы\nexport const fetchReviews = async movieId => {\n  try {\n    const url = `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`;\n    const response = await fetch(url);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    toast.error('Something vent wrong:(');\n    console.log(error);\n  }\n};","import { Link, useParams, useNavigate, Outlet, useLocation} from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { fetchById } from '../../components/ApiFetch/ApiFetch.js';\nimport styled from 'styled-components';\n\nconst MovieDetails = () => {\n    const [state, setState] = useState({\n        item: {},\n        loading: false,\n        error: null,\n    });\n  \n  const { id } = useParams();\n  \n  const navigate = useNavigate();\n  \n  const location = useLocation();\n  const from = location.state?.from || \"/\";\n\n       useEffect(() => {\n           const fetchMovie = async () => {\n               try {\n                 setState(prevState => ({\n                ...prevState,\n                     loading: true,\n                error: null,\n            }));\n                const result = await fetchById(id);\n                setState(prevState => {\n                    return {\n                        ...prevState,\n                        item: result,\n                    }\n                })\n            } catch (error) {\n                setState(prevState => ({\n                    ...prevState,\n                    error,\n                }))\n            }\n            finally {\n                setState(prevState => {\n                    return {\n                        ...prevState,\n                        loading: false,\n                    }\n                })\n            }\n        };\n        fetchMovie();\n       }, [id, setState]);\n  \n  const goBack = () => navigate(from);\n\n    const { original_title, overview, vote_average, poster_path, release_date } = state.item;\n//   const genresStr = genres.reduce((str, genre) => {\n//     return str + `${genre.name}, `;\n//   }, '');\n//   const genresStrFinal = genresStr.slice(0, genresStr.length - 2);\n\n    return (\n        <>\n     \n        <SMain>\n          <MovieCard>\n      <button onClick = {goBack}>Go Back</button>\n            \n\n            <SContent>\n              <img\n                src={'https://image.tmdb.org/t/p/w500' + poster_path}\n                alt={original_title}\n                width={`200px`}\n                height={`400px`}\n              />\n              <SText>\n                            <h3>{original_title} ({release_date})</h3>\n                            <h4>Overview</h4>\n                <p>{overview}</p>\n                <p>Reiting: {vote_average}</p>\n                {/* <p>Genres: {genresStrFinal}</p> */}\n              </SText>\n            </SContent>\n          </MovieCard>\n          <MovieCard>\n          <h3>Additional information</h3>\n          <ul>\n            <li>\n              <Link state={{from}} to={`/movies/${id}/cast`}>\n                Cast\n              </Link>\n            </li>\n            <li>\n              <Link state={{from}} to={`/movies/${id}/reviews`}>\n                Reviews\n              </Link>\n            </li>\n            </ul>\n          </MovieCard>  \n           <Outlet />\n        </SMain>\n      \n    </>\n  );\n};\n\nconst SMain = styled.main`\n  margin: auto;\n  padding-top: 80px;\n  padding-bottom: 10px;\n  width: 90vh;\n//   min-height: 100vh;\n  border-bottom-style: solid;\n  /* display: flex; */\n`;\n\nconst MovieCard = styled.div`\n  padding: 10px;\nborder-bottom-style: solid;\n`;\n\nconst SContent = styled.div`\n  display: flex;\n  padding-top: 20px;\n`;\nconst SText = styled.div`\n  text-align: left;\n  padding-left: 10px;\n  & p {\n    font-size: 20px;\n    padding: 10px;\n  }\n  & h3 {\n    padding-left: 30px;\n  }\n`;\n\n\n\nexport default MovieDetails;\n"],"names":["API_KEY","BASE_URL","fetchPopular","url","fetch","response","json","data","results","console","log","fetchByQuery","searchQuery","fetchById","movieId","toast","fetchCredits","fetchReviews","SMain","styled","MovieCard","SContent","SText","useState","item","loading","error","state","setState","id","useParams","navigate","useNavigate","from","useLocation","useEffect","fetchMovie","prevState","result","original_title","overview","vote_average","poster_path","release_date","onClick","src","alt","width","height","to"],"sourceRoot":""}