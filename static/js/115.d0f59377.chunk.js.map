{"version":3,"file":"static/js/115.d0f59377.chunk.js","mappings":"+SAIMA,EAAU,mCACVC,EAAW,gCAGJC,EAAY,mCAAG,wGAElBC,EAFkB,UAETF,EAFS,sCAE6BD,GAF7B,SAGDI,MAAMD,GAHL,cAGlBE,EAHkB,gBAILA,EAASC,OAJJ,cAIlBC,EAJkB,yBAKjBA,EAAKC,SALY,kCAOxBC,QAAQC,IAAR,KAAmB,gBAPK,0DAAH,qDAYZC,EAAY,mCAAG,WAAMC,GAAN,2FAElBT,EAFkB,UAETF,EAFS,gCAEuBD,EAFvB,iCAEuDY,EAFvD,iCAGDR,MAAMD,GAHL,cAGlBE,EAHkB,gBAILA,EAASC,OAJJ,cAIlBC,EAJkB,yBAKjBA,EAAKC,SALY,kCAOxBC,QAAQC,IAAR,MAPwB,0DAAH,sDAYZG,EAAS,mCAAG,WAAMC,GAAN,2FAEfX,EAFe,UAENF,EAFM,iBAEWa,EAFX,oBAE8Bd,EAF9B,4BAGEI,MAAMD,GAHR,cAGfE,EAHe,gBAIFA,EAASC,OAJP,cAIfC,EAJe,yBAKdA,GALc,kCAOrBQ,EAAAA,GAAAA,MAAY,0BACZN,QAAQC,IAAR,MARqB,0DAAH,sDAaTM,EAAY,mCAAG,WAAMF,GAAN,2FAElBX,EAFkB,UAETF,EAFS,iBAEQa,EAFR,4BAEmCd,EAFnC,4BAGDI,MAAMD,GAHL,cAGlBE,EAHkB,gBAILA,EAASC,OAJJ,cAIlBC,EAJkB,yBAKjBA,GALiB,kCAOxBQ,EAAAA,GAAAA,MAAY,0BACZN,QAAQC,IAAR,MARwB,0DAAH,sDAaZO,EAAY,mCAAG,WAAMH,GAAN,2FAElBX,EAFkB,UAETF,EAFS,iBAEQa,EAFR,4BAEmCd,EAFnC,mCAGDI,MAAMD,GAHL,cAGlBE,EAHkB,gBAILA,EAASC,OAJJ,cAIlBC,EAJkB,yBAKjBA,GALiB,kCAOxBQ,EAAAA,GAAAA,MAAY,0BACZN,QAAQC,IAAR,MARwB,0DAAH,qD,4ICenBQ,EAAYC,EAAAA,GAAAA,IAAH,uEAKTC,EAASD,EAAAA,GAAAA,GAAH,mEAINE,EAAQF,EAAAA,GAAAA,GAAH,yJAQLG,EAAQH,EAAAA,GAAAA,GAAH,kOAcX,UAlGa,WACR,OAA0BI,EAAAA,EAAAA,UAAS,CAChCC,MAAO,GACPC,SAAS,EACTC,MAAO,OAHV,eAAOC,EAAP,KAAcC,EAAd,KAKOC,GAAOC,EAAAA,EAAAA,MAAPD,IAELE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAU,mCAAG,oGAEbJ,GAAS,SAAAK,GAAS,yBAChBA,GADgB,IAEdR,SAAS,EACdC,MAAO,MAHY,IAFL,UAOOV,EAAAA,EAAAA,IAAaa,GAPpB,OAORK,EAPQ,OAQdN,GAAS,SAAAK,GACL,OAAO,kBACAA,GADP,IAEIT,MAAOU,EAAOC,MAErB,IAba,gDAedP,GAAS,SAAAK,GAAS,yBACXA,GADW,IAEdP,MAAK,MAFS,IAfJ,yBAqBdE,GAAS,SAAAK,GACL,OAAO,kBACAA,GADP,IAEIR,SAAS,GAEhB,IA1Ba,4EAAH,qDA6BnBO,GACA,GAAE,CAACH,EAAID,IAIX,IACMQ,EADYT,EAAVH,MACea,KAAI,gBAAGR,EAAH,EAAGA,GAAIS,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OACvB,UAAClB,EAAD,YACQ,gBACIG,QAAQ,OACRgB,IAAK,kCAAoCD,EACzCE,IAAKJ,EACLK,MAAK,WAEb,wBAAKL,KACL,uBAAIC,MARIV,EADW,IAa3B,OACI,UAACX,EAAD,YACF,SAACE,EAAD,oBACC,SAACC,EAAD,UACIe,MAIV,C","sources":["components/ApiFetch/ApiFetch.js","pages/Cast/Cast.jsx"],"sourcesContent":["// key: bb3421bd0819dc82dbf8039d45c8f34c\n\nimport toast from 'react-hot-toast';\n\nconst API_KEY = 'bb3421bd0819dc82dbf8039d45c8f34c';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\n// метод получения массива популярных фильмов. Total_pages = 1000 по дефолту.\nexport const fetchPopular = async () => {\n  try {\n    const url = `${BASE_URL}trending/movie/day?api_key=${API_KEY}`;\n    const response = await fetch(url);\n    const data = await response.json();\n    return data.results;\n  } catch (error) {\n    console.log(error, 'fetchPopular');\n  }\n};\n\n// метод получения массива фильмов по запросу.\nexport const fetchByQuery = async searchQuery => {\n  try {\n    const url = `${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&include_adult=false`;\n    const response = await fetch(url);\n    const data = await response.json();\n    return data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// метод получения инфо о фильме по айдишке\nexport const fetchById = async movieId => {\n  try {\n    const url = `${BASE_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`;\n    const response = await fetch(url);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    toast.error('Something vent wrong:(');\n    console.log(error);\n  }\n};\n\n// актеры\nexport const fetchCredits = async movieId => {\n  try {\n    const url = `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`;\n    const response = await fetch(url);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    toast.error('Something vent wrong:(');\n    console.log(error);\n  }\n};\n\n//отзывы\nexport const fetchReviews = async movieId => {\n  try {\n    const url = `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`;\n    const response = await fetch(url);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    toast.error('Something vent wrong:(');\n    console.log(error);\n  }\n};","import { useParams} from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { fetchCredits } from '../../components/ApiFetch/ApiFetch.js';\nimport styled from 'styled-components';\n\n\nconst Cast = () => {\n     const [state, setState] = useState({\n        items: [],\n        loading: false,\n        error: null,\n    });\n    const { id } = useParams();\n    \n       useEffect(() => {\n           const fetchMovie = async () => {\n               try {\n                 setState(prevState => ({\n                ...prevState,\n                     loading: true,\n                error: null,\n            }));\n                const result = await fetchCredits(id);\n                setState(prevState => {\n                    return {\n                        ...prevState,\n                        items: result.cast,\n                    }\n                })\n            } catch (error) {\n                setState(prevState => ({\n                    ...prevState,\n                    error,\n                }))\n            }\n            finally {\n                setState(prevState => {\n                    return {\n                        ...prevState,\n                        loading: false,\n                    }\n                })\n            }\n        };\n        fetchMovie();\n       }, [id, setState]);\n    \n    // const goBack = () => navigate(-1);\n    // const { loading } = state.loading;\n    const { items } = state;\n    const elements = items.map(({ id, name, character, profile_path }) => (\n        <SItem key={id}>            \n                <img\n                    loading=\"lazy\"\n                    src={'https://image.tmdb.org/t/p/w500' + profile_path}\n                    alt={name}\n                    width={`100px`}\n                />\n            <h3>{name}</h3>\n            <p>{character}</p>\n        </SItem>\n    ));\n\n    return (\n        <MovieCard>\n      <STitle>Cast</STitle>\n       <SList>\n          {elements}\n        </SList>\n   </MovieCard>\n  );\n};\n\nconst MovieCard = styled.div`\n  padding: 10px;\nborder-bottom-style: solid;\n`;\n\nconst STitle = styled.h2`\n  margin: 0 0 0 30px;\n  /* margin: 0; */\n`;\nconst SList = styled.ul`\n  display: flex;\n  align-items: stretch;\n  justify-content: space-around;\n  flex-wrap: wrap;\n  padding: 10px;\n  margin: 0;\n`;\nconst SItem = styled.li`\n  text-align: center;\n  list-style: none;\n  margin: 0 30px;\n  border: 1px solid;\n  width: 200px;\n  margin-bottom: 20px;\n  & h3 {\n    margin: 10px 0;\n  }\n  & p {\n    margin-bottom: 30px;\n  }\n`;\nexport default Cast;"],"names":["API_KEY","BASE_URL","fetchPopular","url","fetch","response","json","data","results","console","log","fetchByQuery","searchQuery","fetchById","movieId","toast","fetchCredits","fetchReviews","MovieCard","styled","STitle","SList","SItem","useState","items","loading","error","state","setState","id","useParams","useEffect","fetchMovie","prevState","result","cast","elements","map","name","character","profile_path","src","alt","width"],"sourceRoot":""}